from reportlab.lib.pagesizes import A4
from reportlab.lib.colors import HexColor
from reportlab.lib import colors
from reportlab.pdfgen.canvas import Canvas
from reportlab.lib.utils import ImageReader
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import Paragraph

from io import BytesIO
from PIL import Image


class FormularioPDF:
    """
    A class for creating PDF forms using the ReportLab library.

    Attributes:
        canvas (Canvas): A ReportLab Canvas instance for drawing the form.
        cm_to_points (float): Conversion factor from centimeters to points.

    Methods:
        set_styles: Sets default styles for form elements.
        draw_labeled_rectangle: Draws a rectangle with a label.
        draw_checkboxes_dynamic: Draws a series of dynamic checkboxes.
        draw_labeled_rectangle_with_checkboxes: Draws a rectangle with checkboxes.
        create_form_block: Creates a block of form fields.
    """

    def __init__(self, file_name, papersize=A4):
        """
        Initializes a new instance of the FormularioPDF class.

        Args:
            file_name (str): The name of the PDF file to be created.
            papersize (tuple, optional): The size of the pages in the PDF. Defaults to A4.
        """
        self.canvas = Canvas(file_name, pagesize=papersize)
        self.papersize = papersize
        self.width, self.height = papersize
        self.cm_to_points = 28.35  # 1 cm = 28.35 points
        self.set_styles()


    def set_styles(self, label_color="#000000", line_color="#3465a4", line_width=1,font_name="Helvetica", font_size=10, 
                   corner_radius=5, line_height=0.9, field_height=0.7):
        """
        Sets default styles for form elements.

        Args:
            label_color (str, optional): Hexadecimal color for label text. Defaults to "#000000".
            line_color (str, optional): Hexadecimal color for line and rectangles. Defaults to "#3465a4".
            font_name (str, optional): Font name for text. Defaults to "Helvetica".
            font_size (int, optional): Font size for text. Defaults to 10.
            corner_radius (int, optional): Corner radius for rounded rectangles. Defaults to 5.
            line_height (float, optional): Height of lines in cm. Defaults to 0.9.
            field_height (float, optional): Height of fields in cm. Defaults to 0.7.
        """

        self.label_color   = label_color
        self.line_color    = line_color
        self.line_width    = line_width
        self.font_name     = font_name
        self.font_size     = font_size
        self.corner_radius = corner_radius
        self.line_height   = line_height * self.cm_to_points  # Espa√ßamento entre as linhas
        self.field_height  = field_height * self.cm_to_points  # Altura do campo


    def draw_labeled_rectangle(self, x, y, width, height, label_text, inner_text=None, 
                               inner_text_color=None, inner_font_name=None, inner_font_size=None, fill=1, **kwargs):
        """
        Draws a rectangle with a label at the top and an optional inner text inside it. The inner text can include line breaks.
    
        Args:
            x (float): The x-coordinate of the rectangle's lower-left corner.
            y (float): The y-coordinate of the rectangle's lower-left corner.
            width (float): The width of the rectangle.
            height (float): The height of the rectangle.
            label_text (str): The text to be displayed as the label of the rectangle.
            inner_text (str, optional): The text to be displayed inside the rectangle. Supports line breaks with '\\n'.
            inner_text_color (str, optional): The color of the inner text. Defaults to the instance's label_color.
            inner_font_name (str, optional): The font name for the inner text. Defaults to the instance's font_name.
            inner_font_size (int, optional): The font size for the inner text. Defaults to the instance's font_size.
    
        """
    
        # Setting default values if not provided
        defaults = self.set_default_values(**kwargs)
        
        # Now you can access the default values for each optional argument using defaults['key']        
        label_color = defaults['label_color']
        line_color = defaults['line_color']
        line_width = defaults['line_width']
        font_name = defaults['font_name']
        font_size = defaults['font_size']
        corner_radius = defaults['corner_radius']
    
        canvas = self.canvas
    
        # Draw the rectangle with rounded corners
        canvas.setLineWidth(line_width)
        canvas.setFillColor(HexColor("#FFFFFF"))
        canvas.setStrokeColor(HexColor(label_color))
        canvas.roundRect(x, y, width, height, radius=corner_radius, stroke=1, fill=fill)
        
        # Calculate dimensions and positioning of the label
        label_width, label_height = canvas.stringWidth(label_text, font_name, font_size), font_size
        label_x = x + (width - label_width) / 2.0
        label_y = y + height - label_height*0.5
    
        # Draw the white rectangle for the text
        canvas.setFillColor(HexColor("#FFFFFF"))
        canvas.rect(label_x, label_y, label_width, label_height, stroke=0, fill=1)
    
        # Draw the label
        canvas.setFillColor(HexColor(label_color))
        canvas.setFont(font_name, font_size)
        canvas.drawString(label_x, label_y, label_text)
    
        # If inner_text is provided, draw it inside the rectangle
        if inner_text:
            # Set default values for the color and style of the inner text if not provided
            inner_text_color = inner_text_color or self.label_color
            inner_font_name = inner_font_name or self.font_name
            inner_font_size = inner_font_size or self.font_size
        
            # Split the text into lines
            inner_lines = inner_text.split('\\n')
            num_lines = len(inner_lines)
            total_text_height = num_lines * inner_font_size + (num_lines - 1) * (0.25*self.line_height)  # Line spacing
            
            # Position the first line of the text
            inner_text_y = y + (height - total_text_height) / 2 + (num_lines - 1) * (inner_font_size + (0.25*self.line_height))
            
            for line in inner_lines:
                # Calculate the width and positioning of each line
                inner_text_width = canvas.stringWidth(line, inner_font_name, inner_font_size)
                inner_text_x = x + (width - inner_text_width) / 2.0
            
                # Draw each line of text
                canvas.setFillColor(HexColor(inner_text_color))
                canvas.setFont(inner_font_name, inner_font_size)
                canvas.drawString(inner_text_x, inner_text_y, line)
            
                # Move to the next line
                inner_text_y -= inner_font_size + self.line_height*0.25

    def draw_labeled_rectangle_with_checkboxes(self, x, y, width, height, label_text, checkbox_labels, **kwargs):
        """
        Draws a labeled rectangle with checkboxes and their labels inside.
    
        Args:
            x (float): The x-coordinate of the rectangle's lower-left corner.
            y (float): The y-coordinate of the rectangle's lower-left corner.
            width (float): The width of the rectangle.
            height (float): The height of the rectangle.
            label_text (str): The text for the rectangle's label.
            checkbox_labels (list of str): Labels for each checkbox.
            **kwargs: Optional keyword arguments for customizing the block's appearance.

        """
    
        # Setting default values if not provided
        defaults = self.set_default_values(**kwargs)
        
        # Now you can access the default values for each optional argument using defaults['key']        
        label_color = defaults['label_color']
        line_color = defaults['line_color']
        font_name = defaults['font_name']
        font_size = defaults['font_size']
        corner_radius = defaults['corner_radius']
    
        # Draw the labeled rectangle
        self.draw_labeled_rectangle(x, y, width, height, label_text, inner_text=None, label_color=label_color, line_color=line_color,
                                    line_width=line_width,font_name=font_name, font_size=font_size, corner_radius=corner_radius)
    
        # Calculate dimensions and positions for checkboxes and their labels
        if checkbox_labels:
            space_reserved = 0.75
            checkbox_area_width = width   # Reserve half the width for checkboxes and labels
            checkbox_x_start = x + width*(1-space_reserved)*0.5  # Start position
            checkbox_size = height * 0.5  # Checkbox size, smaller than the height
            checkbox_y = y + (height - checkbox_size) / 2  # Centered vertically
    
            # Draw checkboxes and labels
            self.draw_checkboxes_dynamic(x, checkbox_y, checkbox_area_width, checkbox_size, checkbox_labels, label_color)
    
    def draw_checkboxes_dynamic(self, x, y, width, height, checkbox_labels, space_reserved=0.75, **kwargs):
        """
        Draws a series of dynamically positioned checkboxes with labels, centered within a reserved space.
    
        Args:
            x (float): The x-coordinate for the rectangle's lower-left corner.
            y (float): The y-coordinate for the rectangle's lower-left corner.
            width (float): The width of the rectangle.
            height (float): The height of the rectangle.
            checkbox_labels (list of str): Labels for each checkbox.
            space_reserved (float): Fraction of width reserved for checkboxes and labels.
            **kwargs: Optional keyword arguments for customizing the block's appearance.
        """
        
        label_color = label_color or self.label_color
        # Setting default values if not provided
        defaults = self.set_default_values(**kwargs)
        
        # Now you can access the default values for each optional argument using defaults['key']
        
        label_color = defaults['label_color']
        line_color = defaults['line_color']
        font_name = defaults['font_name']
        font_size = defaults['font_size']

        canvas = self.canvas
    
        checkbox_size = height * 0.5  # Checkbox size, smaller than the height
        space_between = 5  # Space between checkbox and label
    
        # Calculate the total width required for all checkboxes and labels
        total_width = 0
        for label in checkbox_labels:
            label_width = canvas.stringWidth(label, font_name, font_size)
            total_width += checkbox_size + label_width + space_between
    
        # Calculate starting x-coordinate to center the checkboxes and labels in the reserved area
        reserved_width = width * space_reserved
        start_x = x + (width - reserved_width) / 2 + (reserved_width - total_width) / 2
    
        current_x = start_x
        for label in checkbox_labels:
            label_width = canvas.stringWidth(label, font_name, font_size)
    
            # Draw checkbox
            canvas.setFillColor(HexColor('#FFFFFF'))
            canvas.setStrokeColor(HexColor(label_color))
            canvas.rect(current_x, y + (height - checkbox_size) / 2, checkbox_size, checkbox_size, stroke=1, fill=1)
    
            # Draw label
            canvas.setFillColor(HexColor(label_color))
            canvas.setFont(font_name, font_size)
            canvas.drawString(current_x + checkbox_size + space_between, y + (height - font_size) / 2, label)
    
            # Update current_x for the next checkbox and label
            current_x += checkbox_size + label_width + space_between

    def create_form_block(self, x, y, field_blocks, block_name, **kwargs):
        """
        Creates a structured block of form fields in the PDF.
    
        Args:
            x (float): The starting x-coordinate for the block.
            y (float): The starting y-coordinate for the block.
            field_blocks (list of tuples): Each tuple contains the line number and a list of fields for that line.
            block_name (str): The name of the block.
            **kwargs: Optional keyword arguments for customizing the block's appearance.
        """
    
        # Setting default values if not provided
        defaults = self.set_default_values(**kwargs)
        
        # Now you can access the default values for each optional argument using defaults['key']
        
        label_color = defaults['label_color']
        line_color = defaults['line_color']
        font_name = defaults['font_name']
        font_size = defaults['font_size']

        # Constants for layout calculation
        cm_to_points = self.cm_to_points
        line_height = self.line_height
        field_height = self.field_height
    
        # Calculate positions for form fields
        positions = self._calculate_field_positions(x, y, field_blocks, cm_to_points, line_height, field_height)
        print(f"positions====> {positions}")
        # Draw each form field
        for field_position in positions:
            pos_x, pos_y, width, height, field_label = field_position[:5]  # Elementos b√°sicos
            inner_text = field_position[5] if len(field_position) > 5 else None  # Elemento opcional
    
            # Chama draw_labeled_rectangle com inner_text se dispon√≠vel
            self.draw_labeled_rectangle(pos_x, pos_y, width, height, field_label, inner_text)

        # Draw block label
        self._draw_block_label(x, y, field_blocks, block_name, label_color, font_name, font_size, field_height)
    
    def _calculate_field_positions(self, x, y, field_blocks, cm_to_points, line_height, field_height):
        """
        Calculate positions of each field in the form block, with support for an optional third element in each field.
        """

        print(f"field_blocks => {field_blocks}")

        positions = []
        for fields in field_blocks[1]:  # Iterate over the tuples within each sublist
            current_x = x
            line, elements = fields
            for field in elements:
                fwidth, field_label = field[:2]  # Always get the first two elements
                optional_element = field[2] if len(field) > 2 else None  # Get the third element if it exists
        
                pos_y = y - ((line - 1) * line_height)
                field_position = (current_x, pos_y, fwidth * cm_to_points, field_height, field_label)
        
                # If there's an optional element, include it
                if optional_element is not None:
                    field_position += (optional_element,)
        
                positions.append(field_position)
                current_x += fwidth * cm_to_points
        return positions



    def _draw_block_label(self, x, y, field_blocks, block_name, label_color, font_name, font_size, field_height):
        """
        Draw the label for the form block.
        """

        print(f"field_blocks <=====> {field_blocks}")
        height = (field_blocks[-1][0] - field_blocks[0][0]) * self.line_height
        width = field_height * 0.70
        xpos = x
        ypos = y - height
    
        self.canvas.setStrokeColor(label_color)
        self.canvas.setFillColor(HexColor('#FFFFFF'))
        self.canvas.roundRect(xpos, ypos, width, height + field_height, radius=2, stroke=1, fill=1)
    
        # Add vertical label
        self.canvas.setFillColor(label_color)
        self.canvas.setFont(font_name, font_size)
        self.canvas.saveState()
        self.canvas.translate(x + field_height * 0.5, (y + field_height + ypos) / 2)
        self.canvas.rotate(90)
        self.canvas.drawCentredString(0, 0, block_name)
        self.canvas.restoreState()

    def insert_image(self, image_path, x, y, width, height):
        """
        Insere uma imagem no PDF.
    
        Args:
            image_path (str): O caminho para a imagem a ser inserida.
            x (float): A coordenada x no PDF onde a imagem ser√° colocada.
            y (float): A coordenada y no PDF onde a imagem ser√° colocada.
            width (float): A largura da imagem no PDF.
            height (float): A altura da imagem no PDF.
        """
        self.canvas.drawImage(image_path, x, y, width, height, preserveAspectRatio=True, anchor='c')
    
    
    def insert_image_from_binary(self, image_data, x, y, width, height):
        """
        Insere uma imagem no PDF a partir de dados bin√°rios.
    
        Args:
            image_data (bytes): Dados bin√°rios da imagem.
            x (float): A coordenada x no PDF onde a imagem ser√° colocada.
            y (float): A coordenada y no PDF onde a imagem ser√° colocada.
            width (float): A largura da imagem no PDF.
            height (float): A altura da imagem no PDF.
        """
        # Convert PIL Image to bytes if it's not already in bytes format
        if isinstance(image_data, Image.Image):
            buffer = BytesIO()
            image_data.save(buffer, format="JPEG")  # Adjust format if necessary
            image_data = buffer.getvalue()
    
        # Now image_data is in bytes format, use it directly
        self.canvas.drawImage(ImageReader(BytesIO(image_data)), x, y, width, height, preserveAspectRatio=True, anchor='c')

        
    def draw_gender_field(self, field_x, field_y, field_width, field_height, selected_option=None, options=("M", "F"), checkbox_size=10, font_size=10, checkmark_font_size=14):
        """
        Draws gender selection checkboxes ('F' and 'M') centered within a predefined field and marks an 'X' in the selected checkbox.
    
        Args:
            field_x (float): The x-coordinate of the field's starting point.
            field_y (float): The y-coordinate of the field's starting point.
            field_width (float): The width of the entire field.
            field_height (float): The height of the entire field.
            selected_option (str): The option ('F' or 'M') that should be marked as selected.
            options (tuple): A tuple containing the options for the field ('F', 'M').
            checkbox_size (int): The size of the checkboxes.
            font_size (int): The font size for the labels next to the checkboxes.
            checkmark_font_size (int): The font size for the checkmark 'X'.
        """    
        
        # Calcular a largura total necess√°ria para as caixas de sele√ß√£o e texto
        total_width = 0
        spacing = 5  # Espa√ßo entre elementos
        for option in options:
            total_width += checkbox_size + spacing + self.canvas.stringWidth(option, self.font_name, self.font_size)
    
        # Reduzir o espa√ßamento final ap√≥s a √∫ltima op√ß√£o
        total_width -= spacing
    
        # Calcular o ponto inicial X para centralizar os elementos dentro do campo
        option_x = field_x + (field_width - total_width) / 2
    
        # Calcular o ponto inicial Y para centralizar verticalmente
        option_y = field_y + (field_height*0.75 - checkbox_size) / 2
    
        # Desenhar as caixas de sele√ß√£o e os r√≥tulos
        for option in options:
            self.canvas.setFont(self.font_name, self.font_size)

            self.canvas.rect(option_x, option_y, checkbox_size, checkbox_size, stroke=1, fill=0)
            self.canvas.drawString(option_x + checkbox_size + 2, option_y, option)
            #option_x += checkbox_size + self.canvas.stringWidth(option, "Helvetica", font_size) + spacing

            if selected_option: 
                # Verificar se a op√ß√£o atual √© a selecionada e, em caso afirmativo, marcar um 'X'
                if option == selected_option:
                    # Centralizar o 'X' na caixa
                    checkmark_x = option_x + (checkbox_size - self.canvas.stringWidth("X", "Helvetica-Bold", self.font_size)) / 2
                    checkmark_y = option_y + (checkbox_size - self.font_size) / 2
                    self.canvas.setFont("Helvetica-Bold", self.font_size)
                    self.canvas.drawString(checkmark_x, checkmark_y, "X")
        
                # Atualizar option_x para a pr√≥xima caixa de sele√ß√£o
            option_x += checkbox_size + self.canvas.stringWidth(option, self.font_name, self.font_size) + spacing

    def insert_header_image(self, image_path, x, y, width_percentage=None):
        """
        Inserts an image into the header of the PDF form at a specified width percentage of its original size.

        The method places an image at the specified coordinates on the PDF canvas.
        If a width percentage is provided, the image is resized to that percentage of its original width,
        maintaining its aspect ratio.

        Args:
            image_path (str): The path to the image file.
            x (float): The x-coordinate on the PDF canvas where the image will be placed.
            y (float): The y-coordinate on the PDF canvas where the image will be placed.
            width_percentage (float, optional): The desired width of the image as a percentage of 
                its original width. For example, 0.25 for 25% of the original width. If not provided, 
                the image's original size is used.

        Returns:
            None
        """
        image_reader = ImageReader(image_path)
        original_width, original_height = image_reader.getSize()

        # Calculate new size if a width percentage is provided
        if width_percentage:
            new_width = original_width * width_percentage
            new_height = original_height * width_percentage  # maintain aspect ratio
        else:
            new_width, new_height = original_width, original_height

        self.canvas.drawImage(image_reader, x, y, width=new_width, height=new_height)

    def create_pdf_header__(self, logo_path, header_text, **kwargs):
        """
        Creates a formatted header in the PDF with a logo and header text.

        Args:
            logo_path (str): The path to the logo image file.
            header_text (str): The text to display in the header.
            **kwargs: Optional keyword arguments for customizing the block's appearance.

        Returns:
            None
        """
        
        # Setting default values if not provided
        defaults = self.set_default_values(**kwargs)
        
        # Now you can access the default values for each optional argument using defaults['key']
        
        label_color = defaults['label_color']
        line_color = defaults['line_color']
        font_name = defaults['font_name']
        font_size = defaults['font_size']


        # Constants for layout
        margin = 1.00 * self.cm_to_points  # Margem esquerda
        line_height = 14  # Adjust as needed
        font_size = 12  # Set font and size as needed
        min_header_height = line_height * 4

        # Calculate the header height
        header_text_lines = header_text.strip().split('\n')
        header_height = max(min_header_height, line_height * len(header_text_lines))

        # Load the logo image and calculate the logo height
        logo = ImageReader(logo_path)
        original_logo_width, original_logo_height = logo.getSize()
        logo_height = header_height * 1.5
        logo_width = original_logo_width * (logo_height / original_logo_height)

        # Draw header background
        #header_bg_color = colors.HexColor("#4BACC6")
        #self.canvas.setFillColor(header_bg_color)
        #self.canvas.rect(0, self.height - header_height - margin * 2, self.width, header_height + margin * 2, stroke=0, fill=1)

        # Draw the logo image
        self.canvas.drawImage(logo, margin, self.height - logo_height - margin, width=logo_width, height=logo_height, mask='auto')

        # Set up the header text
        text_x = logo_width + margin
        text_y = self.height - line_height - margin  # Adjust vertical position as needed
        self.canvas.setFont(self.font_name, self.font_size)
        self.canvas.setFillColor(colors.black)

        # Draw the header text
        for line in header_text_lines:
            self.canvas.drawString(text_x, text_y, line)
            text_y -= line_height  # Move to the next line
            
    def create_pdf_header(self, logo_path, header_text, **kwargs):
        """
        Creates a formatted header in the PDF with a logo and header text.
        
        Args:
            logo_path (str): The path to the logo image file.
            header_text (str): The text to display in the header.
            **kwargs: Optional keyword arguments for customizing the header appearance.
        
        Returns:
            None
        """
        # Setting default values if not provided
        defaults = self.set_default_values(**kwargs)
        
        # Access the default values for each optional argument
        label_color = defaults['label_color']
        line_height = defaults['line_height']
        line_color = defaults['line_color']
        font_name = defaults['font_name']
        font_size = defaults['font_size']

        styles = getSampleStyleSheet()
        styles = getSampleStyleSheet()
        header_style = styles['Heading1']
        subheader_style = styles['Heading2']
        normal_style = styles['Normal']

        custom_header_style = ParagraphStyle(
            'CustomHeader',
            parent=header_style,
            fontSize=font_size,
            leading=line_height,
            spaceAfter=6
        )

        # Calculate the height of the header based on text lines
        num_lines = header_text.count('<br/>') + 1
        min_lines = 4
        header_height = max(min_lines, num_lines) * line_height

        # Draw the logo image, adjusting its height to the header height
        logo = ImageReader(logo_path)
        original_logo_width, original_logo_height = logo.getSize()
        logo_height = header_height
        logo_width = original_logo_width * (logo_height / original_logo_height)
        margin = 1.00 * self.cm_to_points  # Left margin
        self.canvas.drawImage(logo, margin, self.height - logo_height - margin, width=logo_width, height=logo_height, mask='auto')

        # Create the header text using Paragraph to handle HTML-style formatting
        header_paragraph = Paragraph(header_text, custom_header_style)
        header_paragraph.wrapOn(self.canvas, self.width - logo_width - margin, header_height)
        header_paragraph.drawOn(self.canvas, logo_width + margin, self.height - header_height - margin)

    def create_centered_text(self, text, x, y, **kwargs):
        """
        Creates centered text on the PDF.

        Args:
            text (str): The text to be centered.
            x (float): The x-coordinate for the center of the text.
            y (float): The y-coordinate for the center of the text.
            **kwargs: Optional keyword arguments for customizing the header appearance.
        
        Returns:
            None
        """
        # Setting default values if not provided
        defaults = self.set_default_values(**kwargs)
        
        # Access the default values for each optional argument
        label_color = defaults['label_color']
        line_height = defaults['line_height']
        line_color = defaults['line_color']
        font_name = defaults['font_name']
        font_size = defaults['font_size']


        text_width = self.canvas.stringWidth(text, font_name, font_size)
        self.canvas.drawString(x - (text_width / 2), self.height - y, text)


    def set_default_values(self, **kwargs):
        """
        Set default values for optional keyword arguments.
    
        Args:
            **kwargs: Optional keyword arguments and their default values.
    
                label_color (str, optional): The color of the label text. Defaults to the instance's label_color.
                line_color (str, optional): The color of the rectangle's line. Defaults to the instance's line_color.
                font_name (str, optional): The font name for the label text. Defaults to the instance's font_name.
                font_size (int, optional): The font size for the label text. Defaults to the instance's font_size.
                corner_radius (int, optional): The corner radius for the rectangle. Defaults to the instance's corner_radius.
                line_height (float, optional): Height of lines in cm. Defaults to 0.9 cm.
                field_height (float, optional): Height of fields in cm. Defaults to 0.7 cm.
    
        Returns:
            dict: A dictionary containing the default values for each optional argument.
        """
        defaults = {
            'label_color': self.label_color,
            'line_color': self.line_color,
            'line_height': self.line_height * self.cm_to_points,  # Default height in points
            'line_width': self.line_width,
            'font_name': self.font_name,
            'font_size': self.font_size,
            'corner_radius': self.corner_radius,
            'field_height': self.field_height * self.cm_to_points  # Default field height in points
        }
        
        # Update defaults with provided values, convert line_height and field_height to points if provided
        for key, value in kwargs.items():
            if value is not None:
                if key in ['line_height', 'field_height']:
                    defaults[key] = value * self.cm_to_points
                else:
                    defaults[key] = value
        
        return defaults
